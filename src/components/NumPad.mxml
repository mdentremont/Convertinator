<?xml version="1.0" encoding="utf-8"?>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Copyright 2010-2012 Matt d'Entremont
   -
   - This file is part of Convertinator.
   -
   - Convertinator is free software: you can redistribute it and/or modify
   - it under the terms of the GNU Lesser General Public License as published by
   - the Free Software Foundation, either version 3 of the License, or
   - (at your option) any later version.
   -
   - Convertinator is distributed in the hope that it will be useful,
   - but WITHOUT ANY WARRANTY; without even the implied warranty of
   - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   - GNU Lesser General Public License for more details.
   -
   - You should have received a copy of the GNU Lesser General Public License
   - along with Convertinator.  If not, see <http://www.gnu.org/licenses/>.
   -
   - ***** END LICENSE BLOCK ***** -->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="components.*"
		  width="350" height="100%" gap="2">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="textChanged", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import events.NumpadEvent;
			
			import mx.collections.ArrayCollection;
			
			import objects.Unit;
			
			import qnx.dialog.DialogAlign;
			import qnx.dialog.PopupList;
			import qnx.display.IowWindow;
			
			import spark.components.List;
			
			[Bindable]
			public var _textBoxText:String = "";
			private var _units:ArrayCollection;
			private var _selectedIndex:int;

			private function keyPressedHandler(event:NumpadEvent):void {
				if (event.key == "") {
					if (_textBoxText.length != 0) {
						_textBoxText = _textBoxText.substr(0, _textBoxText.length - 1);
					}	
				} else if (event.key == ".") {
					if (_textBoxText.indexOf(".") == -1) {
						_textBoxText += event.key;
					}
				} else if (event.key == "C") {
					_textBoxText = "";
				} else if (event.key == "+/-") {
					if (_textBoxText != null) {
						if (_textBoxText.charAt(0) != "-") {
							_textBoxText = "-" + _textBoxText;
						} else {
							_textBoxText = _textBoxText.slice(1);
						}
					}
				} else if (_textBoxText.length < 32) {
					// Maintain a maximum size
					_textBoxText += event.key;
				}
				dispatchEvent(new Event("textChanged"));
			}
			
			protected function newUnitSelected(event:Event):void {
				var popup:PopupList = event.target as PopupList;
				
				// Only handle the "OK" button
				if (popup.selectedIndex == 0) {
					selectedIndex = popup.selectedIndices[0];
					selectedType.label = (units[selectedIndex] as Unit).type;
					dispatchEvent(new Event("textChanged"));
				}
			}
			
			public function popupChangeUnitType(event:Event):void {
				var popup:PopupList = new PopupList;
				popup.align = DialogAlign.CENTER;
				popup.title = "Choose New Base Unit";
				
				var arr:Array = new Array();
				for each (var u:Unit in units) {
					arr.push(u.type);
				}
				popup.items = arr;
				
				var selected:Array = new Array();
				selected.push(selectedIndex);
				popup.selectedIndices = selected;
				popup.scrollToIndex = selectedIndex;				
				
				popup.multiSelect = false;
				popup.addButton("OK");
				popup.addButton("Cancel");
				popup.addEventListener(Event.SELECT, newUnitSelected);
				popup.show(IowWindow.getAirWindow().group);
			}
			
			
			public function get units():ArrayCollection {
				return _units;
			}
			
			public function set units(arr:ArrayCollection):void {
				_units = arr;
				_selectedIndex = 0;
			}
			
			public function get selectedIndex():int {
				return _selectedIndex;
			}
			
			public function set selectedIndex(i:int):void {
				_selectedIndex = i;
			}
			
			public function get textBoxText():String {
				return _textBoxText;
			}
			
			public function set textBoxText(text:String):void {
				_textBoxText = text;
			}
		]]>
	</fx:Script>
	<s:BorderContainer borderStyle="inset"
					   borderWeight="5" 
					   dropShadowVisible="true" 
					   height="80"
					   textAlign="center"
					   width="100%" 
					   >
		<s:RichText id="textBox" 
					color="0x000000f"
					fontFamily="Arial" 
					fontSize="32" 
					fontWeight="bold" 
					height="100%"
					paddingBottom="5"
					paddingLeft="15"
					paddingRight="15"
					paddingTop="5"
					text="{_textBoxText}" 
					textAlign="left"
					width="100%" 
					verticalAlign="top" 
					/>
	</s:BorderContainer>
	<s:HGroup left="0"
			  height="40"
			  width="350"
			  verticalAlign="middle"
			  y="80"
			  >
		<s:Button id="selectedType"
				  click="popupChangeUnitType(event)"
				  height="100%"
				  width="100%"
				  />
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="2">
		<components:Key label="+/-" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="C" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key width="100%" height="100%" label="" fontSize="24"
						icon="@Embed(source='../Arrow.png')" keyPressed="keyPressedHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="2">
		<components:Key label="7" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="8" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="9" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="2">
		<components:Key label="4" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="5" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="6" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="2">
		<components:Key label="1" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="2" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="3" width="100%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
	</s:HGroup>
	<s:HGroup width="100%" height="100%" gap="2">
		<components:Key label="0" width="66.666666666%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
		<components:Key label="." width="33.333333333%" height="100%" fontSize="24" keyPressed="keyPressedHandler(event)"/>
	</s:HGroup>
</s:VGroup>